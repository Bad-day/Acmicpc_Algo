# 보석 = n / 보석무게 m 
# 가격 v / 가지고있는 가방 개수 k 
# 각 가방의 최대용량 c(가방 최대 1개만들어감)
# 보석 가격 합의 최댓값 출력
# 보석 , 가방개수 = map(int, input().split());sum=0 #n(보석) ,k(가방개수)
# 보석무게, 보석가격 = [],[]
# 보석무게,보석가격 = [list(int, map(int, input().split())) for _ in range(보석)] #m 보석무게, 가격v
# 가방용량 = int(input())#가방 최대용량
# print(type(보석가격))
# for i in 보석무게:
#     print(i)
#     if 가방용량 >=i:
#         sum+=i
# print(sum)
# a, b = [list(map(int, input().split())) for _ in range(2)]
# print(a)
# print(type(a))
import heapq
N, K = map(int, input().split());gems=[];bags = []
# M,V = [map(int, input().split)[heapq.heappush(gems, [M,V])] for _ in range(N)]# 보석 무게를 기준으로 min heap으로 저장
for _ in range(N):
    M, V = map(int, input().split())
    heapq.heappush(gems, [M, V]) 
for _ in range(K):
    bags.append(int(input()))
bags.sort() # 가방 무게를 기준으로 오름차순 정렬

candidates = []
ans = 0

for bag in bags:
    while gems and bag >= gems[0][0]:
        heapq.heappush(candidates, -heapq.heappop(gems)[1]) # 보석 가치를 기준으로 max heap으로 저장
    
    if candidates:
        ans -= heapq.heappop(candidates) # 가장 가치가 높은 보석을 선택하여 가치의 합에 추가
    elif not gems:
        break # 보석과 가방이 모두 소진되었으면 종료

print(ans)

# 위 코드에서 heapq 모듈을 사용하여 무게나 가치를 기준으로 
# min heap 또는 max heap으로보석을 저장하고, 
# 가방의 무게를 기준으로 오름차순 정렬합니다. 
# 그리고 candidates 리스트에 현재 가방 무게 이하의 
# 모든 보석을 보석 가치를 기준으로 max heap으로 저장합니다.
# 가방을 하나씩 처리할 때마다 candidates에서 가장 가치가 높은 보석을 선택하여
# 가치의 합에 추가합니다. 
# 모든 가방을 처리하거나 보석이 모두 소진될 때까지 이를 반복합니다. 
# 최종적으로 가치의 합을 출력합니다.